// Code generated by mockery v2.14.0. DO NOT EDIT.

package service

import (
	context "context"

	wording "github.com/connorkuehl/wording/internal/wording"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CreateGame provides a mock function with given fields: ctx, adminToken, token, answer, guessLimit
func (_m *MockStore) CreateGame(ctx context.Context, adminToken string, token string, answer string, guessLimit int) (*wording.Game, error) {
	ret := _m.Called(ctx, adminToken, token, answer, guessLimit)

	var r0 *wording.Game
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) *wording.Game); ok {
		r0 = rf(ctx, adminToken, token, answer, guessLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wording.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int) error); ok {
		r1 = rf(ctx, adminToken, token, answer, guessLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGame'
type MockStore_CreateGame_Call struct {
	*mock.Call
}

// CreateGame is a helper method to define mock.On call
//  - ctx context.Context
//  - adminToken string
//  - token string
//  - answer string
//  - guessLimit int
func (_e *MockStore_Expecter) CreateGame(ctx interface{}, adminToken interface{}, token interface{}, answer interface{}, guessLimit interface{}) *MockStore_CreateGame_Call {
	return &MockStore_CreateGame_Call{Call: _e.mock.On("CreateGame", ctx, adminToken, token, answer, guessLimit)}
}

func (_c *MockStore_CreateGame_Call) Run(run func(ctx context.Context, adminToken string, token string, answer string, guessLimit int)) *MockStore_CreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockStore_CreateGame_Call) Return(_a0 *wording.Game, _a1 error) *MockStore_CreateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteGame provides a mock function with given fields: ctx, adminToken
func (_m *MockStore) DeleteGame(ctx context.Context, adminToken string) error {
	ret := _m.Called(ctx, adminToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, adminToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGame'
type MockStore_DeleteGame_Call struct {
	*mock.Call
}

// DeleteGame is a helper method to define mock.On call
//  - ctx context.Context
//  - adminToken string
func (_e *MockStore_Expecter) DeleteGame(ctx interface{}, adminToken interface{}) *MockStore_DeleteGame_Call {
	return &MockStore_DeleteGame_Call{Call: _e.mock.On("DeleteGame", ctx, adminToken)}
}

func (_c *MockStore_DeleteGame_Call) Run(run func(ctx context.Context, adminToken string)) *MockStore_DeleteGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_DeleteGame_Call) Return(_a0 error) *MockStore_DeleteGame_Call {
	_c.Call.Return(_a0)
	return _c
}

// Game provides a mock function with given fields: ctx, adminToken
func (_m *MockStore) Game(ctx context.Context, adminToken string) (*wording.Game, error) {
	ret := _m.Called(ctx, adminToken)

	var r0 *wording.Game
	if rf, ok := ret.Get(0).(func(context.Context, string) *wording.Game); ok {
		r0 = rf(ctx, adminToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wording.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, adminToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Game_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Game'
type MockStore_Game_Call struct {
	*mock.Call
}

// Game is a helper method to define mock.On call
//  - ctx context.Context
//  - adminToken string
func (_e *MockStore_Expecter) Game(ctx interface{}, adminToken interface{}) *MockStore_Game_Call {
	return &MockStore_Game_Call{Call: _e.mock.On("Game", ctx, adminToken)}
}

func (_c *MockStore_Game_Call) Run(run func(ctx context.Context, adminToken string)) *MockStore_Game_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_Game_Call) Return(_a0 *wording.Game, _a1 error) *MockStore_Game_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GameByToken provides a mock function with given fields: ctx, token
func (_m *MockStore) GameByToken(ctx context.Context, token string) (*wording.Game, error) {
	ret := _m.Called(ctx, token)

	var r0 *wording.Game
	if rf, ok := ret.Get(0).(func(context.Context, string) *wording.Game); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wording.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GameByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GameByToken'
type MockStore_GameByToken_Call struct {
	*mock.Call
}

// GameByToken is a helper method to define mock.On call
//  - ctx context.Context
//  - token string
func (_e *MockStore_Expecter) GameByToken(ctx interface{}, token interface{}) *MockStore_GameByToken_Call {
	return &MockStore_GameByToken_Call{Call: _e.mock.On("GameByToken", ctx, token)}
}

func (_c *MockStore_GameByToken_Call) Run(run func(ctx context.Context, token string)) *MockStore_GameByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GameByToken_Call) Return(_a0 *wording.Game, _a1 error) *MockStore_GameByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IncrementStats provides a mock function with given fields: ctx, stats
func (_m *MockStore) IncrementStats(ctx context.Context, stats wording.IncrementStats) error {
	ret := _m.Called(ctx, stats)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, wording.IncrementStats) error); ok {
		r0 = rf(ctx, stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_IncrementStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementStats'
type MockStore_IncrementStats_Call struct {
	*mock.Call
}

// IncrementStats is a helper method to define mock.On call
//  - ctx context.Context
//  - stats wording.IncrementStats
func (_e *MockStore_Expecter) IncrementStats(ctx interface{}, stats interface{}) *MockStore_IncrementStats_Call {
	return &MockStore_IncrementStats_Call{Call: _e.mock.On("IncrementStats", ctx, stats)}
}

func (_c *MockStore_IncrementStats_Call) Run(run func(ctx context.Context, stats wording.IncrementStats)) *MockStore_IncrementStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(wording.IncrementStats))
	})
	return _c
}

func (_c *MockStore_IncrementStats_Call) Return(_a0 error) *MockStore_IncrementStats_Call {
	_c.Call.Return(_a0)
	return _c
}

// Plays provides a mock function with given fields: ctx, gameToken, playerToken
func (_m *MockStore) Plays(ctx context.Context, gameToken string, playerToken string) (*wording.Plays, error) {
	ret := _m.Called(ctx, gameToken, playerToken)

	var r0 *wording.Plays
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *wording.Plays); ok {
		r0 = rf(ctx, gameToken, playerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wording.Plays)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, gameToken, playerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Plays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Plays'
type MockStore_Plays_Call struct {
	*mock.Call
}

// Plays is a helper method to define mock.On call
//  - ctx context.Context
//  - gameToken string
//  - playerToken string
func (_e *MockStore_Expecter) Plays(ctx interface{}, gameToken interface{}, playerToken interface{}) *MockStore_Plays_Call {
	return &MockStore_Plays_Call{Call: _e.mock.On("Plays", ctx, gameToken, playerToken)}
}

func (_c *MockStore_Plays_Call) Run(run func(ctx context.Context, gameToken string, playerToken string)) *MockStore_Plays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_Plays_Call) Return(_a0 *wording.Plays, _a1 error) *MockStore_Plays_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutPlays provides a mock function with given fields: ctx, gameToken, playerToken, plays
func (_m *MockStore) PutPlays(ctx context.Context, gameToken string, playerToken string, plays *wording.Plays) error {
	ret := _m.Called(ctx, gameToken, playerToken, plays)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *wording.Plays) error); ok {
		r0 = rf(ctx, gameToken, playerToken, plays)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_PutPlays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPlays'
type MockStore_PutPlays_Call struct {
	*mock.Call
}

// PutPlays is a helper method to define mock.On call
//  - ctx context.Context
//  - gameToken string
//  - playerToken string
//  - plays *wording.Plays
func (_e *MockStore_Expecter) PutPlays(ctx interface{}, gameToken interface{}, playerToken interface{}, plays interface{}) *MockStore_PutPlays_Call {
	return &MockStore_PutPlays_Call{Call: _e.mock.On("PutPlays", ctx, gameToken, playerToken, plays)}
}

func (_c *MockStore_PutPlays_Call) Run(run func(ctx context.Context, gameToken string, playerToken string, plays *wording.Plays)) *MockStore_PutPlays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*wording.Plays))
	})
	return _c
}

func (_c *MockStore_PutPlays_Call) Return(_a0 error) *MockStore_PutPlays_Call {
	_c.Call.Return(_a0)
	return _c
}

// Stats provides a mock function with given fields: ctx
func (_m *MockStore) Stats(ctx context.Context) (wording.Stats, error) {
	ret := _m.Called(ctx)

	var r0 wording.Stats
	if rf, ok := ret.Get(0).(func(context.Context) wording.Stats); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(wording.Stats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockStore_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockStore_Expecter) Stats(ctx interface{}) *MockStore_Stats_Call {
	return &MockStore_Stats_Call{Call: _e.mock.On("Stats", ctx)}
}

func (_c *MockStore_Stats_Call) Run(run func(ctx context.Context)) *MockStore_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_Stats_Call) Return(_a0 wording.Stats, _a1 error) *MockStore_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
